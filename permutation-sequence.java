// The set [1,2,3,â€¦,n] contains a total of n! unique permutations. By listing and labeling all of the permutations in order, We get the following sequence (ie, for n = 3): "123" "132" "213" "231" "312" "321" Given n and k, return the kth permutation sequence. Note: Given n will be between 1 and 9 inclusive.

public class Solution {
    // The intuitive way to solve this problem is that
    // we iterate all the possible combinations and store them in
    // a collection, then get the kth number. However this will
    // take O(n!) time for input n.
    // A better solution is that we pre-compute the amount
    // of numbers that can be generated given an input n,
    // then we see which numbers can make up exactly kth number.
    // For example: given n = 3, k = 5, we start by picking first
    // number, it could be 1,2,3. Then 2 digits left. 2 digits can
    // generate 2 numbers. So for 5th number, if we pick 1 as first
    // digit, at most it would have 2, if we pick 2 as first number,
    // it could be at most 2+2 = 4th, in this case we can only pick
    // 3 as our first digit. Then we need to get n = 2, k = 1 number
    // as the remaining part of '3XX', recursively. So much bullshit lol.
    public String getPermutation(int n, int k) {
        // get the amount of combinations(factorial of n)
        int count = 1;
        for(int i = 1; i <= n; count *= i++);
        if(n == 0 || k > count) return "";

        List<Integer> list = new ArrayList<Integer>();
        // List is the numbers that we pick from, 
        // a candidates set.
        for(int i = 1; i <= n; i++){
            list.add(i);
        }

        StringBuilder sb = new StringBuilder();

        helper(list, n, k, sb);

        return sb.toString();
    }

    public void helper(List<Integer> list, int n, int k, StringBuilder sb){
        if(n == 1){
            // if only one number left to be picked, we just pick
            // what is left in the candidates set
            sb.append(list.get(0));
            return;
        }

        int count = 1;
        // amount of numbers can be generated by picking n - 1 digits 
        // from the set.
        for(int i = 1; i < n; count *= i++);
        int index = 0;

        while(k > count){
            k -= count;
            index++;
        }

        // after picking kth number we have to 
        // remove it from the set, since one
        // number can only be used once.
        sb.append(list.get(index));
        list.remove(index);
        helper(list, n - 1, k, sb);
    }
}